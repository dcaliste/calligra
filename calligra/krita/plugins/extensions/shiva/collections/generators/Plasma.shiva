/*
 * Copyright (c) 2009 Ricardo Cabello
 * Copyright (c) 2010 Cyrille Berger
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

<
  parameters: <
    center: <
      type: float2;
      minValue: {0,0};
      maxValue: {1,1};
      defaultValue: {0.5, 0.5};
    >;
    distort: <
      type: float;
      minValue: 0;
      maxValue: 0.1;
      defaultValue: 0.0;
    >;
    offset: <
      type: float2;
      minValue: {-100,-100};
      maxValue: {100,100};
      defaultValue: {0,0};
    >;

    color_offset: <
      type: color;
      defaultValue: {0.0,0.0,0.0,1.0};
    >;
    wave: <
      type: float2;
      minValue: {0,0};
      maxValue: {0.1,0.1};
      defaultValue: {0.05,0.05};
    >;
  >;
>;  

kernel PlasmaEffect
{
  dependent float2 center_p;
  void evaluateDependents()
  {
    center_p = { IMAGE_WIDTH * center.x, IMAGE_HEIGHT * center.y };
  }
  void evaluatePixel(output pixel4 dst)
  {
    float2 pos = dst.coord;
    
    float2 dist = pos - center_p;
    float distance = sqrt((dist.x * dist.x) + (dist.y * dist.y)) * distort;
    
    float color = cos((offset.x + pos.x) * wave.x) + sin((offset.y + pos.y) * wave.y) + sin(distance) + cos(distance);
    
    dst = float4(color + color_offset.red, color + color_offset.green, color + color_offset.blue, color_offset.opacity);
  }
}
